<?php
// $Id$

/**
 * @file
 * Install file for DIBS.
 */

/**
 * Implementation of hook_install().
 */
function dibs_install() {
  // Create tables.
  drupal_install_schema('dibs');

  // Inserting default order id setting
  db_query("INSERT INTO {dibs_order_id_settings} VALUES ('dibs', 'default', 10000, '', '')");
}

/**
 * Implementation of hook_uninstall().
 */
function dibs_uninstall() {
  // Delete menu links.
  db_query("DELETE FROM {menu_links} WHERE module = 'dibs'");
  menu_cache_clear_all();

  // Remove tables.
  drupal_uninstall_schema('dibs');
}

/**
 * Implementation of hook_schema().
 */
function dibs_schema() {
  $schema['dibs_transactions'] = array(
    'description' => t('Stores dibs transactions'),
    'fields' => array(
      'tid' => array(
        'type' => 'serial',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'length' => 10,
        'description' => t('Transaction ID.'),
      ),
      'api_module' => array(
        'type' => 'varchar',
        'length' => 64,
        'not null' => TRUE,
        'default' => '',
        'description' => t('API module name'),
      ),
      'api_delta' => array(
        'type' => 'varchar',
        'length' => 64,
        'not null' => TRUE,
        'default' => '',
        'description' => t('API delta value'),
      ),
      'api_hash' => array(
        'type' => 'varchar',
        'length' => 64,
        'not null' => TRUE,
        'default' => '',
        'description' => t('API hash value. Used in payment process'),
      ),
      'order_info_short' => array(
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
        'default' => '',
        'description' => t('Order info short'),
      ),
      'order_info_long' => array(
        'type' => 'text',
        'not null' => TRUE,
        'default' => '',
        'description' => t('Order info long. Serialized'),
      ),
      'order_price_info' => array(
        'type' => 'text',
        'not null' => TRUE,
        'default' => '',
        'description' => t('Order price info. Serialized'),
      ),
      'payment_time' => array(
        'type' => 'datetime',
        'description' => t('Payment time'),
        'not null' => FALSE,
      ),
      'payment_order_id' => array(
        'type' => 'varchar',
        'length' => 32,
        'not null' => TRUE,
        'default' => '',
        'description' => t('Order id'),
      ),
      'payment_retry_count' => array(
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
        'description' => t('Payment retry count that can be used to suffix order number'),
      ),
      'payment_status' => array(
        'type' => 'int',
        'length' => 1,
        'size' => 'tiny',
        'default' => 0,
        'description' => t('0 = payment not recieved, 1 = payment recieved'),
      ),
      'payment_currency' => array(
        'type' => 'varchar',
        'length' => 5,
        'not null' => TRUE,
        'default' => '',
        'description' => t('Currency code for the payment'),
      ),
      'payment_price' => array(
        'type' => 'float',
        'description' => t('The price paid'),
      ),
      'payment_type' => array(
        'type' => 'varchar',
        'length' => 10,
        'not null' => TRUE,
        'default' => '',
        'description' => t('The payment type the user choose in the payment window.'),
      ),
      'payment_transaction_type' => array(
        'type' => 'varchar',
        'length' => 10,
        'not null' => TRUE,
        'default' => '',
        'description' => t('For later use.'),
      ),
      'payment_transaction_id' => array(
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'length' => 10,
        'description' => t('Transaction id from DIBS.'),
      ),
      'customer_uid' => array(
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'length' => 10,
        'description' => t('User ID'),
      ),
      'customer_name' => array(
        'type' => 'varchar',
        'length' => 64,
        'not null' => TRUE,
        'default' => '',
        'description' => t('The customers name'),
      ),
      'customer_address' => array(
        'type' => 'varchar',
        'length' => 64,
        'not null' => TRUE,
        'default' => '',
        'description' => t('The customers address'),
      ),
      'customer_address_2' => array(
        'type' => 'varchar',
        'length' => 64,
        'not null' => TRUE,
        'default' => '',
        'description' => t('The customers address 2'),
      ),
      'customer_city' => array(
        'type' => 'varchar',
        'length' => 64,
        'not null' => TRUE,
        'default' => '',
        'description' => t('The customers city'),
      ),
      'customer_zipcode' => array(
        'type' => 'varchar',
        'length' => 10,
        'not null' => TRUE,
        'default' => '',
        'description' => t('The customers zipcode'),
      ),
      'customer_country' => array(
        'type' => 'varchar',
        'length' => 64,
        'not null' => TRUE,
        'default' => '',
        'description' => t('The customers country'),
      ),
      'customer_email' => array(
        'type' => 'varchar',
        'length' => 64,
        'not null' => TRUE,
        'default' => '',
        'description' => t('The customers email'),
      ),
      'customer_phone' => array(
        'type' => 'varchar',
        'length' => 14,
        'not null' => TRUE,
        'default' => '',
        'description' => t('The customers phone'),
      ),
    ),
    'indexes' => array(
      'payment_time' => array('payment_time'),
      'payment_status' => array('payment_status'),
      'payment_order_id' => array('payment_order_id'),
      'payment_type' => array('payment_type'),
      'payment_transaction_id' => array('payment_transaction_id'),
      'customer_uid' => array('customer_uid'),
      'api_idx' => array('api_module', 'api_delta'),
      'api_hash' => array('api_hash'),
    ),
    'primary key' => array('tid'),
  );

  $schema['dibs_transactions_log'] = array(
    'description' => t('Logs different events related to a transaction'),
    'fields' => array(
      'tid' => array(
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'length' => 10,
        'description' => t('Transaction ID.'),
      ),
      'type' => array(
        'type' => 'varchar',
        'length' => 10,
        'not null' => TRUE,
        'default' => '',
        'description' => t('Log record type'),
      ),
      'subtype' => array(
        'type' => 'varchar',
        'length' => 20,
        'not null' => TRUE,
        'default' => '',
        'description' => t('Log record subtype. Used to thme a certain log line. Not required'),
      ),
      'log_text' => array(
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
        'default' => '',
        'description' => t('Log text.'),
      ),
      'log_value' => array(
        'type' => 'varchar',
        'length' => 32,
        'not null' => TRUE,
        'default' => '',
        'description' => t('Log value. Used in combination with subtype.'),
      ),
      'time' => array(
        'type' => 'datetime',
        'description' => t('Log time'),
        'not null' => FALSE,
      ),
    ),
    'indexes' => array(
      'tid' => array('tid'),
      'time' => array('time'),
      'type' => array('type'),
      'subtype' => array('subtype'),
    ),
  );

  $schema['dibs_order_id_settings'] = array(
    'description' => t('Used to store order id settings for each dibs implementation'),
    'fields' => array(
      'api_module' => array(
        'type' => 'varchar',
        'length' => 64,
        'not null' => TRUE,
        'default' => '',
        'description' => t('API module name'),
      ),
      'api_delta' => array(
        'type' => 'varchar',
        'length' => 64,
        'not null' => TRUE,
        'default' => '',
        'description' => t('API delta value'),
      ),
      'order_id' => array(
        'type' => 'int',
        'length' => 10,
        'default' => 0,
        'description' => t('Order id counter'),
      ),
      'order_id_prefix' => array(
        'type' => 'varchar',
        'length' => 10,
        'not null' => TRUE,
        'default' => '',
        'description' => t('Order id prefix'),
      ),
      'order_id_suffix' => array(
        'type' => 'varchar',
        'length' => 10,
        'not null' => TRUE,
        'default' => '',
        'description' => t('Order id suffix'),
      ),
    ),
    'indexes' => array(
      'api_idx' => array('api_module', 'api_delta'),
      'order_id' => array('order_id'),
    ),
    'primary key' => array('api_module', 'api_delta'),
  );
  return $schema;
}

function dibs_update_6001() {
  $ret = array();

  db_add_field($ret, 'dibs_transactions', 'payment_retry_count', array(
    'type' => 'int',
    'not null' => TRUE,
    'default' => 0,
    'description' => t('Payment retry count that can be used to suffix order number'),
  ));

  return $ret;
}